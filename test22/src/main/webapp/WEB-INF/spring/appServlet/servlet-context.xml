<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd
		">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
		
	
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<context:component-scan base-package="com.min.www.*" />


	<!-- MultipartResolver -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="100000000" />
		<beans:property name="maxInMemorySize" value="100000000" />
	</beans:bean>

	<beans:bean id="uploadDirResource"
		class="org.springframework.core.io.FileSystemResource">
		<beans:constructor-arg>
			<beans:value>/Users/donghyeonmin/upload</beans:value>
		</beans:constructor-arg>
	</beans:bean>
	<!-- multipartResolver -->


	<!-- tiles3 -->
	<beans:bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
		<beans:property name="order" value="0" />
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />


	</beans:bean>

	<beans:bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<beans:property name="order" value="1" />
	</beans:bean>


	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/context-tiles3.xml</beans:value>
			</beans:list>
		</beans:property>

	</beans:bean>

	<!-- 게시판파일업로드 경로 -->
	<beans:bean id="uploadPath" class="java.lang.String">
		<beans:constructor-arg value="/Users/donghyeonmin/upload/" />

	</beans:bean>
	<!--  멤버 이미지 파일 업로드 경로  -->
	<beans:bean id="imageUploadPath" class="java.lang.String">
		<beans:constructor-arg value="/Users/donghyeonmin/eclipse-workspace/test22/src/main/webapp/resources/imageupload/" />

	</beans:bean>
	
	
	

	<websocket:handlers>
		<websocket:mapping handler="myHandler" path="/count"/>
	</websocket:handlers>
	
	<beans:bean id="myHandler" class="com.min.www.Service.WebSocketHandler"></beans:bean>


<!-- 
	
	*** cglib.jar 를 추가해야한다. ***
		접근 권한을 부여할 때 context-security.xml에 직접선언을 할 수 있지만, @Secured 어노테이션을 사용하면 좀 더 편하고
		직관적인 권한 부여가 가능하다.
		
		@Secured 어노테이션은 권한이 필요한 부분에 선언 할 수 있는데 Class나 Method 단위까지 지정을 할 수 있다.
		예를 들어 ROLE_ADMIN만 직접시킬 메서드가 있다면 해당 메서드위에 @Secured 어노테이션을 선언해주기만 하면 된다 .
	 -->
	<security:global-method-security  secured-annotations="enabled"/>
	
	
	<!-- 
		@PreAuthorize (메서드 인자값을 검증) , @PostAuthorize ( 메서드 반환값을 검증 ) , @PreFilter, @PostFilte가 사용 가능하다.
		이들 어노테이션에서는 스프링 EL을 사용해서 현재 사용자 정보에 접근하거나, (pre 인 경우) 메서드의 인자 값 또는
		(post인 경우) 메서드의 반환값의 정보에 접근할 수 있다.
		@Pre* : 메서드 인자값에 접근할 수 있다.
		@Post* : 메서드 반환값에 접근 할 수 있다.
	 -->
	<security:global-method-security pre-post-annotations="enabled"/>





</beans:beans>
